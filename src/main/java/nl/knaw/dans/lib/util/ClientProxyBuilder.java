/*
 * Copyright (C) 2021 DANS - Data Archiving and Networked Services (info@dans.knaw.nl)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package nl.knaw.dans.lib.util;

import io.dropwizard.client.JerseyClientBuilder;
import io.dropwizard.client.JerseyClientConfiguration;
import io.dropwizard.core.setup.Environment;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import javax.ws.rs.client.Client;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URI;
import java.util.Objects;
import java.util.function.Function;

/**
 * Builder for creating a client proxy for an API endpoint. This is some boilerplate code that is needed to connect the http client (e.g. Jersey) to the classes generated by OpenAPI Generator.
 *
 * @param <A> the ApiClient class, that serves as an intermediary between the proxy and the underlying HTTP client
 * @param <D> the proxy class used by the application to call specific endpoints
 */
@Slf4j
@RequiredArgsConstructor
public class ClientProxyBuilder<A, D> {
    private A apiClient;
    private URI basePath;
    private JerseyClientConfiguration httpClient;
    private Function<A, D> defaultApiCtor;

    public ClientProxyBuilder<A, D> apiClient(A apiClient) {
        this.apiClient = apiClient;
        return this;
    }

    public ClientProxyBuilder<A, D> basePath(URI basePath) {
        this.basePath = basePath;
        return this;
    }

    public ClientProxyBuilder<A, D> httpClient(JerseyClientConfiguration httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    public ClientProxyBuilder<A, D> defaultApiCtor(Function<A, D> defaultApiCtor) {
        this.defaultApiCtor = defaultApiCtor;
        return this;
    }

    public D build() {
        Objects.requireNonNull(apiClient, "apiClient is required");
        Objects.requireNonNull(basePath, "basePath is required");
        Objects.requireNonNull(httpClient, "httpClient is required");
        Objects.requireNonNull(defaultApiCtor, "defaultApiCtor is required");

        Client client = new JerseyClientBuilder(new Environment(getClass().getName()))
            .using(httpClient)
            .build(getClass().getName() + " client");
        try {
            /*
             * Note that BeanUtils.setProperty will be silently ignored, probably because the setter returns the 'this' reference.
             */

            // End-slashes trip up the API client, so we remove them from the base path.
            // Set basePath
            Field basePathField = apiClient.getClass().getDeclaredField("basePath");
            basePathField.setAccessible(true);
            basePathField.set(apiClient, basePath.toString().replaceAll("/+$", ""));

            // Set httpClient
            Field httpClientField = apiClient.getClass().getDeclaredField("httpClient");
            httpClientField.setAccessible(true);
            httpClientField.set(apiClient, client);

            // Call addDefaultHeader on the apiClient to set the Accept header to application/json
            // By default no Accept header is set, which sometimes causes the server to try to format errors as HTML and failing, making it hard to get at the underlying error message.
            Method addDefaultHeaderMethod = apiClient.getClass().getMethod("addDefaultHeader", String.class, String.class);
            addDefaultHeaderMethod.invoke(apiClient, "Accept", "application/json");
        }
        catch (Exception e) {
            log.error("Error setting properties on apiClient", e);
            throw new RuntimeException(e);
        }
        return defaultApiCtor.apply(apiClient);
    }
}